<code>
<cinclude><![CDATA[#include <QList>]]></cinclude>
<cwrite><![CDATA[
  QList< QList<int> > nestedlist = QList< QList<int> >();

  QList<int> l1 = QList<int>();
  l1.append(3);
  l1.append(5);
  l1.append(7);
  l1.append(11);

  QList<int> l2 = QList<int>();
  l2.append(4);
  l2.append(6);
  l2.append(8);
  l2.append(9);
  l2.append(10);

  nestedlist.append(l1);
  nestedlist.append(l2);

  out << nestedlist;
]]></cwrite>
<cread><![CDATA[
  QList< QList<int> > nestedlist;
  in >> nestedlist;

  assert(nestedlist.size() == 2);

  assert(nestedlist[0].size() == 4);
  assert(nestedlist[0][0] == 3);
  assert(nestedlist[0][1] == 5);
  assert(nestedlist[0][2] == 7);
  assert(nestedlist[0][3] == 11);

  assert(nestedlist[1].size() == 5);
  assert(nestedlist[1][0] == 4);
  assert(nestedlist[1][1] == 6);
  assert(nestedlist[1][2] == 8);
  assert(nestedlist[1][3] == 9);
  assert(nestedlist[1][4] == 10);

]]></cread>
<cswrite><![CDATA[
    List<List<int>> nested = new List<List<int>>();

    nested.Add(new List<int>(new int[] { 3, 5, 7, 11 }));
    nested.Add(new List<int>(new int[] { 4, 6, 8, 9, 10 }));

    QTypeManager.Serialize(fs, nested);
]]></cswrite>
<csread><![CDATA[
    List<List<int>> nl;
    QTypeManager.Deserialize(fs, out nl);
    Debug.Assert(nl.Count == 2);

    Debug.Assert(nl[0].Count == 4);
    Debug.Assert(nl[0][0] == 3);
    Debug.Assert(nl[0][1] == 5);
    Debug.Assert(nl[0][2] == 7);
    Debug.Assert(nl[0][3] == 11);

    Debug.Assert(nl[1].Count == 5);
    Debug.Assert(nl[1][0] == 4);
    Debug.Assert(nl[1][1] == 6);
    Debug.Assert(nl[1][2] == 8);
    Debug.Assert(nl[1][3] == 9);
    Debug.Assert(nl[1][4] == 10);
]]></csread>
</code>
