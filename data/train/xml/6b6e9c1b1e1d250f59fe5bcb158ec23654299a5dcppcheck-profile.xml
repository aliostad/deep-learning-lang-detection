<profile>
	<name>Default C++ Profile</name>
	<language>c++</language>
	<rules>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>autoVariables</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>returnLocalVariable</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>returnReference</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>returnTempReference</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>returnAutocstr</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>returnTempPointer</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>memleak</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>memleakOnRealloc</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>resourceLeak</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>deallocDealloc</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>deallocuse</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>mismatchSize</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>mismatchAllocDealloc</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>debug</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>publicAllocationError</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>leakNoVarFunctionCall</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>cppcheckError</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>variableHidingTypedef</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unnecessaryForwardDeclaration</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>variableHidingEnum</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>syntaxError</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>cppcheckError</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>uninitstring</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>uninitdata</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>uninitvar</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>preprocessorErrorDirective</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>noQuoteCharPair</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>missingInclude</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>nullPointer</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>exceptThrowInDestructor</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>exceptDeallocThrow</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unusedFunction</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>invalidscanf</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unusedVariable</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unreadVariable</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unassignedVariable</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>cstyleCast</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>dangerousUsageStrtol</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>sprintfOverlappingData</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>udivError</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unusedStructMember</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>passedByValue</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>constStatement</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>charArrayIndex</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>charBitOp</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>variableScope</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>conditionAlwaysTrueFalse</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>strPlusChar</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>zerodiv</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>wrongmathcall</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>fflushOnInputStream</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>sizeofsizeof</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>sizeofCalculation</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>redundantAssignInSwitch</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>selfAssignment</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>assignmentInAssert</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>incorrectLogicOperator</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unusedScopedObject</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>noConstructor</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>operatorEqVarError</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>unusedPrivateFunction</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>memsetClass</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>memsetStruct</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>operatorEq</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>operatorEqRetRefThis</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>operatorEqToSelf</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>virtualDestructor</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>thisSubtraction</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>functionConst</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>arrayIndexOutOfBounds</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>bufferAccessOutOfBounds</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>strncatUsage</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>outOfBounds</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>sizeArgumentAsChar</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>terminateStrncpy</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>insecureCmdLineArgs</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>negativeIndex</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>invalidIterator1</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>iterators</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>eraseDereference</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>eraseByValue</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>mismatchingContainers</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>stlOutOfBounds</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>erase</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>invalidIterator2</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>invalidPointer</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>stlBoundries</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>stlIfStrFind</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>stlIfFind</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>stlSize</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>redundantIfRemove</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>StlMissingComparison</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>stlcstr</key>
		</rule>
		<rule>
			<repositoryKey>c++</repositoryKey>
			<key>postfixOperator</key>
		</rule>
	</rules>
</profile>
