package main

import "fmt"

var p = func(s ...interface{}) {
	fmt.Printf("%s\n", s)
}

// fallthroughすると値がcase節にマッチしなくても、
// fallthroughを書いた次の節実行される。

// 同じケースがあるとコンパイルエラーになる。
// 3と3.0, 3+0iは方が違うが同じと見なされる。
// 1, 2.0, 3+0iは1,2,3と互換性があるため、型が違うがコンパイルエラーにはならない。
// 1, 2.1, 3+1iはそれぞれ型が違うものがswitchケースに含まれていると見なされ、コンパイルエラーになる。
// switch節で局所変数が使える。
func main() {
	//n := 3
	n := 2
	switch n {
	case 1,2:
		p(n)
		fallthrough
	case 3,4:
		p(string(n) + "is 3 or 4 or fallthrough")
	default:
		p("default bolok was executed")
	}

	p("=================================================================================")
	//m := 3
	//switch m {
	//case 3:
	//	p("3:", n)
	//case 3.0: //duplicate case 3 in switch
	//	p("3.0:", n)
	//case 3 + 0i: //duplicate case 3 in switch
	//	p(n)
	//}

	p("=================================================================================")
	m := 1
	switch m {
	case 1:
		p("1:", n)
	case 2.0:
		p("2.0:", n)
	case 3 + 0i:
		p(n)
	}

	p("=================================================================================")
	// 値の互換性がないと見なされ、コンパイルエラーになる
	//x := 1
	//switch x {
	//case 1:
	//	p("1:", x)
	//case 2.1:
	//	p("2.1:", x)
	//case 3 + 1i:
	//	p(x)
	//}

	p("=================================================================================")
	// 事前にmが定義されていても、局所変数と見なされ、コンパイルが通る。
	switch m := 2; m {
	case 1:
		p("1:", m)
	case 2.0:
		p("2.0:", m)
	case 3 + 0i:
		p(n)
	}
}

