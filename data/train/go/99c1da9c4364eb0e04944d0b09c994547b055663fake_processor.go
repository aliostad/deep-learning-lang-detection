// This file was generated by counterfeiter
package actionsfakes

import (
	"sync"

	"github.com/pivotal-cf/reconfigure-pipeline/actions"
)

type FakeProcessor struct {
	ProcessStub        func(config string) string
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		config string
	}
	processReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessor) Process(config string) string {
	fake.processMutex.Lock()
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		config string
	}{config})
	fake.recordInvocation("Process", []interface{}{config})
	fake.processMutex.Unlock()
	if fake.ProcessStub != nil {
		return fake.ProcessStub(config)
	} else {
		return fake.processReturns.result1
	}
}

func (fake *FakeProcessor) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *FakeProcessor) ProcessArgsForCall(i int) string {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return fake.processArgsForCall[i].config
}

func (fake *FakeProcessor) ProcessReturns(result1 string) {
	fake.ProcessStub = nil
	fake.processReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.Processor = new(FakeProcessor)
