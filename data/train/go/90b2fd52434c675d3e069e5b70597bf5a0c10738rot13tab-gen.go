// +build gen

package main

import (
	"bytes"
	"fmt"
	"strconv"

	"github.com/dolmen-go/codegen"
)

func main() {
	const tmpl = `// This file is generated by rot13tab-gen.go

//go:generate go run -tags gen rot13tab-gen.go

package rot13

var rot13tab = [256]byte{
{{.}}
}
`

	var b bytes.Buffer
	b.Grow(4096)

	for i := int(0); i < 'A'-1; i++ {
		fmt.Fprintf(&b, "%03o, ", i)
		if i%16 == 15 {
			b.WriteByte('\n')
		}
	}
	b.WriteString("0100,\n")

	for i := byte('A'); i < 'N'; i++ {
		b.WriteByte('\'')
		b.WriteByte(i + 13)
		b.WriteString("', ")
	}
	b.WriteByte('\n')

	for i := byte('N'); i <= 'Z'; i++ {
		b.WriteByte('\'')
		b.WriteByte(i - 13)
		b.WriteString("', ")
	}
	b.WriteByte('\n')

	for i := int('Z' + 1); i < 'a'; i++ {
		b.WriteString(strconv.Itoa(i))
		b.WriteString(", ")
	}
	b.WriteByte('\n')

	for i := byte('a'); i < 'n'; i++ {
		b.WriteByte('\'')
		b.WriteByte(i + 13)
		b.WriteString("', ")
	}
	b.WriteByte('\n')

	for i := byte('n'); i <= 'z'; i++ {
		b.WriteByte('\'')
		b.WriteByte(i - 13)
		b.WriteString("', ")
	}
	b.WriteByte('\n')

	for i := int('z' + 1); i < 256; i++ {
		b.WriteString(strconv.Itoa(i))
		b.WriteString(", ")
		if i%16 == 15 {
			b.WriteByte('\n')
		}
	}

	codegen.MustParse(tmpl).CreateFile("rot13tab.go", b.String())
}
