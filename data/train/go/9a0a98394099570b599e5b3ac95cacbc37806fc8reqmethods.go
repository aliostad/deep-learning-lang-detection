// Copyright (c) 2014 Dataence, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is automatically generated by genfsm.go. Please DO NOT modify.
// This file was generated at 2015-02-23 15:14:04.830172901 -0800 PST.

package sequence

func matchRequestMethods(ss string) int {
	var (
		m int // match length
		s int // state
	)

loop:
	for _, b := range ss {
		switch s {
		case 0:
			switch b {
			case 'G', 'g':
				s = 1
			case 'P', 'p':
				s = 5
			case 'D', 'd':
				s = 13
			case 'C', 'c':
				s = 20
			case 'O', 'o':
				s = 28
			case 'T', 't':
				s = 36
			case 'M', 'm':
				s = 61
			case 'L', 'l':
				s = 74
			case 'U', 'u':
				s = 79
			case 'V', 'v':
				s = 86
			case 'R', 'r':
				s = 133
			case 'B', 'b':
				s = 159
			case 'I', 'i':
				s = 181
			default:
				break loop
			}
		case 1:
			switch b {
			case 'E', 'e':
				s = 2
			default:
				break loop
			}
		case 2:
			switch b {
			case 'T', 't':
				s = 3
			default:
				break loop
			}
		case 3:
			switch b {
			case ' ':
				s = 4
				m = 3
				// GET  - final
			default:
				break loop
			}
		case 5:
			switch b {
			case 'U', 'u':
				s = 6
			case 'O', 'o':
				s = 9
			case 'A', 'a':
				s = 42
			case 'R', 'r':
				s = 47
			default:
				break loop
			}
		case 6:
			switch b {
			case 'T', 't':
				s = 7
			default:
				break loop
			}
		case 7:
			switch b {
			case ' ':
				s = 8
				m = 3
				// PUT  - final
			default:
				break loop
			}
		case 9:
			switch b {
			case 'S', 's':
				s = 10
			default:
				break loop
			}
		case 10:
			switch b {
			case 'T', 't':
				s = 11
			default:
				break loop
			}
		case 11:
			switch b {
			case ' ':
				s = 12
				m = 4
				// POST  - final
			default:
				break loop
			}
		case 13:
			switch b {
			case 'E', 'e':
				s = 14
			default:
				break loop
			}
		case 14:
			switch b {
			case 'L', 'l':
				s = 15
			default:
				break loop
			}
		case 15:
			switch b {
			case 'E', 'e':
				s = 16
			default:
				break loop
			}
		case 16:
			switch b {
			case 'T', 't':
				s = 17
			default:
				break loop
			}
		case 17:
			switch b {
			case 'E', 'e':
				s = 18
			default:
				break loop
			}
		case 18:
			switch b {
			case ' ':
				s = 19
				m = 6
				// DELETE  - final
			default:
				break loop
			}
		case 20:
			switch b {
			case 'O', 'o':
				s = 21
			case 'H', 'h':
				s = 102
			default:
				break loop
			}
		case 21:
			switch b {
			case 'N', 'n':
				s = 22
			case 'P', 'p':
				s = 67
			default:
				break loop
			}
		case 22:
			switch b {
			case 'N', 'n':
				s = 23
			default:
				break loop
			}
		case 23:
			switch b {
			case 'E', 'e':
				s = 24
			default:
				break loop
			}
		case 24:
			switch b {
			case 'C', 'c':
				s = 25
			default:
				break loop
			}
		case 25:
			switch b {
			case 'T', 't':
				s = 26
			default:
				break loop
			}
		case 26:
			switch b {
			case ' ':
				s = 27
				m = 7
				// CONNECT  - final
			default:
				break loop
			}
		case 28:
			switch b {
			case 'P', 'p':
				s = 29
			default:
				break loop
			}
		case 29:
			switch b {
			case 'T', 't':
				s = 30
			default:
				break loop
			}
		case 30:
			switch b {
			case 'I', 'i':
				s = 31
			default:
				break loop
			}
		case 31:
			switch b {
			case 'O', 'o':
				s = 32
			default:
				break loop
			}
		case 32:
			switch b {
			case 'N', 'n':
				s = 33
			default:
				break loop
			}
		case 33:
			switch b {
			case 'S', 's':
				s = 34
			default:
				break loop
			}
		case 34:
			switch b {
			case ' ':
				s = 35
				m = 7
				// OPTIONS  - final
			default:
				break loop
			}
		case 36:
			switch b {
			case 'R', 'r':
				s = 37
			default:
				break loop
			}
		case 37:
			switch b {
			case 'A', 'a':
				s = 38
			default:
				break loop
			}
		case 38:
			switch b {
			case 'C', 'c':
				s = 39
			default:
				break loop
			}
		case 39:
			switch b {
			case 'E', 'e':
				s = 40
			default:
				break loop
			}
		case 40:
			switch b {
			case ' ':
				s = 41
				m = 5
				// TRACE  - final
			default:
				break loop
			}
		case 42:
			switch b {
			case 'T', 't':
				s = 43
			default:
				break loop
			}
		case 43:
			switch b {
			case 'C', 'c':
				s = 44
			default:
				break loop
			}
		case 44:
			switch b {
			case 'H', 'h':
				s = 45
			default:
				break loop
			}
		case 45:
			switch b {
			case ' ':
				s = 46
				m = 5
				// PATCH  - final
			default:
				break loop
			}
		case 47:
			switch b {
			case 'O', 'o':
				s = 48
			default:
				break loop
			}
		case 48:
			switch b {
			case 'P', 'p':
				s = 49
			default:
				break loop
			}
		case 49:
			switch b {
			case 'F', 'f':
				s = 50
			case 'P', 'p':
				s = 55
			default:
				break loop
			}
		case 50:
			switch b {
			case 'I', 'i':
				s = 51
			default:
				break loop
			}
		case 51:
			switch b {
			case 'N', 'n':
				s = 52
			default:
				break loop
			}
		case 52:
			switch b {
			case 'D', 'd':
				s = 53
			default:
				break loop
			}
		case 53:
			switch b {
			case ' ':
				s = 54
				m = 8
				// PROPFIND  - final
			default:
				break loop
			}
		case 55:
			switch b {
			case 'A', 'a':
				s = 56
			default:
				break loop
			}
		case 56:
			switch b {
			case 'T', 't':
				s = 57
			default:
				break loop
			}
		case 57:
			switch b {
			case 'C', 'c':
				s = 58
			default:
				break loop
			}
		case 58:
			switch b {
			case 'H', 'h':
				s = 59
			default:
				break loop
			}
		case 59:
			switch b {
			case ' ':
				s = 60
				m = 9
				// PROPPATCH  - final
			default:
				break loop
			}
		case 61:
			switch b {
			case 'K', 'k':
				s = 62
			case 'O', 'o':
				s = 70
			case 'E', 'e':
				s = 176
			default:
				break loop
			}
		case 62:
			switch b {
			case 'C', 'c':
				s = 63
			case 'W', 'w':
				s = 140
			case 'A', 'a':
				s = 150
			default:
				break loop
			}
		case 63:
			switch b {
			case 'O', 'o':
				s = 64
			default:
				break loop
			}
		case 64:
			switch b {
			case 'L', 'l':
				s = 65
			default:
				break loop
			}
		case 65:
			switch b {
			case ' ':
				s = 66
				m = 5
				// MKCOL  - final
			default:
				break loop
			}
		case 67:
			switch b {
			case 'Y', 'y':
				s = 68
			default:
				break loop
			}
		case 68:
			switch b {
			case ' ':
				s = 69
				m = 4
				// COPY  - final
			default:
				break loop
			}
		case 70:
			switch b {
			case 'V', 'v':
				s = 71
			default:
				break loop
			}
		case 71:
			switch b {
			case 'E', 'e':
				s = 72
			default:
				break loop
			}
		case 72:
			switch b {
			case ' ':
				s = 73
				m = 4
				// MOVE  - final
			default:
				break loop
			}
		case 74:
			switch b {
			case 'O', 'o':
				s = 75
			case 'A', 'a':
				s = 128
			default:
				break loop
			}
		case 75:
			switch b {
			case 'C', 'c':
				s = 76
			default:
				break loop
			}
		case 76:
			switch b {
			case 'K', 'k':
				s = 77
			default:
				break loop
			}
		case 77:
			switch b {
			case ' ':
				s = 78
				m = 4
				// LOCK  - final
			default:
				break loop
			}
		case 79:
			switch b {
			case 'N', 'n':
				s = 80
			case 'P', 'p':
				s = 122
			default:
				break loop
			}
		case 80:
			switch b {
			case 'L', 'l':
				s = 81
			case 'C', 'c':
				s = 110
			default:
				break loop
			}
		case 81:
			switch b {
			case 'O', 'o':
				s = 82
			default:
				break loop
			}
		case 82:
			switch b {
			case 'C', 'c':
				s = 83
			default:
				break loop
			}
		case 83:
			switch b {
			case 'K', 'k':
				s = 84
			default:
				break loop
			}
		case 84:
			switch b {
			case ' ':
				s = 85
				m = 6
				// UNLOCK  - final
			default:
				break loop
			}
		case 86:
			switch b {
			case 'E', 'e':
				s = 87
			default:
				break loop
			}
		case 87:
			switch b {
			case 'R', 'r':
				s = 88
			default:
				break loop
			}
		case 88:
			switch b {
			case 'S', 's':
				s = 89
			default:
				break loop
			}
		case 89:
			switch b {
			case 'I', 'i':
				s = 90
			default:
				break loop
			}
		case 90:
			switch b {
			case 'O', 'o':
				s = 91
			default:
				break loop
			}
		case 91:
			switch b {
			case 'N', 'n':
				s = 92
			default:
				break loop
			}
		case 92:
			switch b {
			case '_', '':
				s = 93
			default:
				break loop
			}
		case 93:
			switch b {
			case 'C', 'c':
				s = 94
			default:
				break loop
			}
		case 94:
			switch b {
			case 'O', 'o':
				s = 95
			default:
				break loop
			}
		case 95:
			switch b {
			case 'N', 'n':
				s = 96
			default:
				break loop
			}
		case 96:
			switch b {
			case 'T', 't':
				s = 97
			default:
				break loop
			}
		case 97:
			switch b {
			case 'R', 'r':
				s = 98
			default:
				break loop
			}
		case 98:
			switch b {
			case 'O', 'o':
				s = 99
			default:
				break loop
			}
		case 99:
			switch b {
			case 'L', 'l':
				s = 100
			default:
				break loop
			}
		case 100:
			switch b {
			case ' ':
				s = 101
				m = 15
				// VERSION_CONTROL  - final
			default:
				break loop
			}
		case 102:
			switch b {
			case 'E', 'e':
				s = 103
			default:
				break loop
			}
		case 103:
			switch b {
			case 'C', 'c':
				s = 104
			default:
				break loop
			}
		case 104:
			switch b {
			case 'K', 'k':
				s = 105
			default:
				break loop
			}
		case 105:
			switch b {
			case 'O', 'o':
				s = 106
			case 'I', 'i':
				s = 119
			default:
				break loop
			}
		case 106:
			switch b {
			case 'U', 'u':
				s = 107
			default:
				break loop
			}
		case 107:
			switch b {
			case 'T', 't':
				s = 108
			default:
				break loop
			}
		case 108:
			switch b {
			case ' ':
				s = 109
				m = 8
				// CHECKOUT  - final
			default:
				break loop
			}
		case 110:
			switch b {
			case 'H', 'h':
				s = 111
			default:
				break loop
			}
		case 111:
			switch b {
			case 'E', 'e':
				s = 112
			default:
				break loop
			}
		case 112:
			switch b {
			case 'C', 'c':
				s = 113
			default:
				break loop
			}
		case 113:
			switch b {
			case 'K', 'k':
				s = 114
			default:
				break loop
			}
		case 114:
			switch b {
			case 'O', 'o':
				s = 115
			default:
				break loop
			}
		case 115:
			switch b {
			case 'U', 'u':
				s = 116
			default:
				break loop
			}
		case 116:
			switch b {
			case 'T', 't':
				s = 117
			default:
				break loop
			}
		case 117:
			switch b {
			case ' ':
				s = 118
				m = 10
				// UNCHECKOUT  - final
			default:
				break loop
			}
		case 119:
			switch b {
			case 'N', 'n':
				s = 120
			default:
				break loop
			}
		case 120:
			switch b {
			case ' ':
				s = 121
				m = 7
				// CHECKIN  - final
			default:
				break loop
			}
		case 122:
			switch b {
			case 'D', 'd':
				s = 123
			default:
				break loop
			}
		case 123:
			switch b {
			case 'A', 'a':
				s = 124
			default:
				break loop
			}
		case 124:
			switch b {
			case 'T', 't':
				s = 125
			default:
				break loop
			}
		case 125:
			switch b {
			case 'E', 'e':
				s = 126
			default:
				break loop
			}
		case 126:
			switch b {
			case ' ':
				s = 127
				m = 6
				// UPDATE  - final
			default:
				break loop
			}
		case 128:
			switch b {
			case 'B', 'b':
				s = 129
			default:
				break loop
			}
		case 129:
			switch b {
			case 'E', 'e':
				s = 130
			default:
				break loop
			}
		case 130:
			switch b {
			case 'L', 'l':
				s = 131
			default:
				break loop
			}
		case 131:
			switch b {
			case ' ':
				s = 132
				m = 5
				// LABEL  - final
			default:
				break loop
			}
		case 133:
			switch b {
			case 'E', 'e':
				s = 134
			default:
				break loop
			}
		case 134:
			switch b {
			case 'P', 'p':
				s = 135
			default:
				break loop
			}
		case 135:
			switch b {
			case 'O', 'o':
				s = 136
			default:
				break loop
			}
		case 136:
			switch b {
			case 'R', 'r':
				s = 137
			default:
				break loop
			}
		case 137:
			switch b {
			case 'T', 't':
				s = 138
			default:
				break loop
			}
		case 138:
			switch b {
			case ' ':
				s = 139
				m = 6
				// REPORT  - final
			default:
				break loop
			}
		case 140:
			switch b {
			case 'O', 'o':
				s = 141
			default:
				break loop
			}
		case 141:
			switch b {
			case 'R', 'r':
				s = 142
			default:
				break loop
			}
		case 142:
			switch b {
			case 'K', 'k':
				s = 143
			default:
				break loop
			}
		case 143:
			switch b {
			case 'S', 's':
				s = 144
			default:
				break loop
			}
		case 144:
			switch b {
			case 'P', 'p':
				s = 145
			default:
				break loop
			}
		case 145:
			switch b {
			case 'A', 'a':
				s = 146
			default:
				break loop
			}
		case 146:
			switch b {
			case 'C', 'c':
				s = 147
			default:
				break loop
			}
		case 147:
			switch b {
			case 'E', 'e':
				s = 148
			default:
				break loop
			}
		case 148:
			switch b {
			case ' ':
				s = 149
				m = 11
				// MKWORKSPACE  - final
			default:
				break loop
			}
		case 150:
			switch b {
			case 'C', 'c':
				s = 151
			default:
				break loop
			}
		case 151:
			switch b {
			case 'T', 't':
				s = 152
			default:
				break loop
			}
		case 152:
			switch b {
			case 'I', 'i':
				s = 153
			default:
				break loop
			}
		case 153:
			switch b {
			case 'V', 'v':
				s = 154
			default:
				break loop
			}
		case 154:
			switch b {
			case 'I', 'i':
				s = 155
			default:
				break loop
			}
		case 155:
			switch b {
			case 'T', 't':
				s = 156
			default:
				break loop
			}
		case 156:
			switch b {
			case 'Y', 'y':
				s = 157
			default:
				break loop
			}
		case 157:
			switch b {
			case ' ':
				s = 158
				m = 10
				// MKACTIVITY  - final
			default:
				break loop
			}
		case 159:
			switch b {
			case 'A', 'a':
				s = 160
			default:
				break loop
			}
		case 160:
			switch b {
			case 'S', 's':
				s = 161
			default:
				break loop
			}
		case 161:
			switch b {
			case 'E', 'e':
				s = 162
			default:
				break loop
			}
		case 162:
			switch b {
			case 'L', 'l':
				s = 163
			default:
				break loop
			}
		case 163:
			switch b {
			case 'I', 'i':
				s = 164
			default:
				break loop
			}
		case 164:
			switch b {
			case 'N', 'n':
				s = 165
			default:
				break loop
			}
		case 165:
			switch b {
			case 'E', 'e':
				s = 166
			default:
				break loop
			}
		case 166:
			switch b {
			case '_', '':
				s = 167
			default:
				break loop
			}
		case 167:
			switch b {
			case 'C', 'c':
				s = 168
			default:
				break loop
			}
		case 168:
			switch b {
			case 'O', 'o':
				s = 169
			default:
				break loop
			}
		case 169:
			switch b {
			case 'N', 'n':
				s = 170
			default:
				break loop
			}
		case 170:
			switch b {
			case 'T', 't':
				s = 171
			default:
				break loop
			}
		case 171:
			switch b {
			case 'R', 'r':
				s = 172
			default:
				break loop
			}
		case 172:
			switch b {
			case 'O', 'o':
				s = 173
			default:
				break loop
			}
		case 173:
			switch b {
			case 'L', 'l':
				s = 174
			default:
				break loop
			}
		case 174:
			switch b {
			case ' ':
				s = 175
				m = 16
				// BASELINE_CONTROL  - final
			default:
				break loop
			}
		case 176:
			switch b {
			case 'R', 'r':
				s = 177
			default:
				break loop
			}
		case 177:
			switch b {
			case 'G', 'g':
				s = 178
			default:
				break loop
			}
		case 178:
			switch b {
			case 'E', 'e':
				s = 179
			default:
				break loop
			}
		case 179:
			switch b {
			case ' ':
				s = 180
				m = 5
				// MERGE  - final
			default:
				break loop
			}
		case 181:
			switch b {
			case 'N', 'n':
				s = 182
			default:
				break loop
			}
		case 182:
			switch b {
			case 'V', 'v':
				s = 183
			default:
				break loop
			}
		case 183:
			switch b {
			case 'A', 'a':
				s = 184
			default:
				break loop
			}
		case 184:
			switch b {
			case 'L', 'l':
				s = 185
			default:
				break loop
			}
		case 185:
			switch b {
			case 'I', 'i':
				s = 186
			default:
				break loop
			}
		case 186:
			switch b {
			case 'D', 'd':
				s = 187
			default:
				break loop
			}
		case 187:
			switch b {
			case ' ':
				s = 188
				m = 7
				// INVALID  - final
			default:
				break loop
			}
		default:
			break loop
		}
	}

	//fmt.Println("m =", m, "l =", l)

	return m
}
