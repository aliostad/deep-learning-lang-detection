<#
.SYNOPSIS
    Tools for sending messages consitantly to multiple addresses when testing mail flow
 
.DESCRIPTION
    I needed to constantly send message and ensure they were being delivered, like PING but with emails sortof.
    Most of the examples on the web would not work my exchange servers without requiring anonomous relays being setup so I built my own
    
    This script can be set up to email a list of users (seperated by comma or semicolon) for a given number of times with a pause inbetween each send task
    designed to authenticate against exchange 2010 and 2013 (2007 will probably work too), it might require some modification for other mailservers. 
    Authentication credentials will be prmopted for during the execution

.PARAMETER  
    Obvious
    -from 
    -to
    -server
    -port
    
    -iterations #number of times to run the script
    -wait #time to wait before next send task in seconds

 
.EXAMPLE
   Start-mailtest -from administator@domain.com -to user1@domain.com;user2@domain.com -server mail.domain.com -port 25 -iterations 10 - wait 5
   #this will send 10 messages waiting 5 seconds between and will take about 50 seconds to complete
   
.NOTES
    Author: Aiden Vaines
    Date: 29/07/2015
    Email: aiden@vaines.org
 #>


Remove-Variable * -force -erroraction 'silentlycontinue'

Function Start-MailTest {
    Param(
       [Parameter(Mandatory=$false)]
            [String]$from = "administrator@domain.com", #Lazy default
        [Parameter(Mandatory=$false)]
            [String]$to = "user1@domain.com;user2@domain.com;user3@domain.com",  #Lazy defaults
        [Parameter(Mandatory=$false)]
            [String]$Server = "mail.domain.com", #Lazy default
        [Parameter(Mandatory=$false)]
            [String]$port = "25",
        [Parameter(Mandatory=$false)]
            [String]$iterations = "30",
        [Parameter(Mandatory=$false)]
            [String]$wait = "60"
    )

    $creds = Get-Credential     

    $Message = New-Object System.Net.Mail.MailMessage
    $Message.From = $from
    
    if ($to -match ";"){
        $to -split ";" | foreach {
            $Message.To.Add( "$_" )
        }
    }elseif ($to -match ","){
        $to -split "," | foreach {
            $Message.To.Add( "$_" )
        }
    }
    $timetaken = [int]$iterations * [int]$wait /60
Write-host "Starting sending process"
write-host "Sending $iterations at a rate of 1 message per $wait seconds"
write-host "It should about take $timetaken minutes to complete"
write-host ""
    
    $i=1; Do{      
        $datetime = Get-Date
        $Message.Subject = "Testing message #$i of $iterations ($datetime)"
        $Message.IsBodyHtml = $true
        $Message.Body = @"
<p>Here is test message number <strong>$i</strong>.</p>
<p><b>Sent From: </b>$from</p>
<p><b>Sent To: </b>$to</p>
<p><b>Sent Via: </b>$Server</p>
<p><b>Sent at: </b>$datetime</p>
<br>
This is a test message, generated by the Start-MailTest script by Aiden Vaines
"@
     
        $SMTPClient = New-Object System.Net.Mail.SmtpClient( $Server , $port )
        $SMTPClient.EnableSsl = $true
        $SMTPClient.UseDefaultCredentials = $False
        $SMTPClient.Credentials = $creds
    
        try {
            $SMTPClient.Send($Message)
            write-host "Message number $i of $iterations sent"
            write-host "Waiting for: $wait seconds..."
            Start-Sleep -s $wait
                        }
        catch {
            write-host $_.Exception.message
            break
            }  
    
        $i=$i+1
   
   } while ($i -lt [int]$iterations +1)

}


Start-MailTest
