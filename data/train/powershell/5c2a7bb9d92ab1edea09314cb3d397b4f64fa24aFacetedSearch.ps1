#
# Module 'Dynamite.PowerShell.Toolkit'
# Generated by: GSoft, Team Dynamite.
# Generated on: 10/24/2013
# > GSoft & Dynamite : http://www.gsoft.com
# > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
# > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
#

<#
	.SYNOPSIS
		Commandlet to set Faceted navigation configuration in the term store

	.DESCRIPTION
		This cmdlet allow you to configure faceted navigation configuration for the taxonomy term store. 
		You can pass a XML file as parameter to automatically create the correct settings.

    --------------------------------------------------------------------------------------
    Module 'Dynamite.PowerShell.Toolkit'
    by: GSoft, Team Dynamite.
    > GSoft & Dynamite : http://www.gsoft.com
    > Dynamite Github : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    > Documentation : https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    --------------------------------------------------------------------------------------
		
	.PARAMETER XmlPath
		Path to the XML file that contains the term driven configuration. The schema for the XML is as follow:
		
		<TermStore Name="Managed Metadata Service">
		  <TermGroup Name="TermGroup">
			<TermSet Name="TermSet">
			  <TargetUrlForChildTerms>/Pages/Example.aspx</TargetUrlForChildTerms>
			  <CatalogTargetUrlForChildTerms>/Pages/Example.aspx</CatalogTargetUrlForChildTerms>
			  <Terms>
				<Term Name="Term">
				<!--
					sortBy: 1 ="name"; 0 ="count"; 2 ="number"
					sortOrder: 	0="descending" ; 1= "ascending"
					type: "Text" ; "DateTime"
					Note: to set localized display name use _catalogs/masterpage/display templates/language files/{locale}/CustomStrings.js
				-->
				<Refiner sortBy="1" 
					sortOrder="0" 
					maxNumberRefinementOptions="5" 
					propertyName="ManagePropertyName" 
					type="Text" 
					displayTemplate="~sitecollection/_catalogs/masterpage/Display Templates/Filters/Filter_Default.js" 
					displayName=""
					useDefaultDateIntervals="false" 
					refinerSpecStringOverride="" 
					intervals="null"/>
				</Term>
			  </Terms>
			</TermSet>
		  </TermGroup>
		</TermStore>
		
	.EXAMPLE
		PS C:\> New-DSPFacetedSearchSettings -XmlPath "C:\FacetedNavigation.xml"

    
  .LINK
    GSoft, Team Dynamite on Github
    > https://github.com/GSoft-SharePoint
    
    Dynamite PowerShell Toolkit on Github
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit
    
    Documentation
    > https://github.com/GSoft-SharePoint/Dynamite-PowerShell-Toolkit/wiki
    
#>
function New-DSPFacetedSearchSettings()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$XmlPath
	)
	
	# Get the Xml content and start looping throught Site Collections and generate the structure
	$Config = [xml](Get-Content $XmlPath)
	
	# Get the term store
	$TermStore = Get-DSPTermStore -Name $Config.TermStore.Name
	
	# Process all Term Groups
	$Config.TermStore.TermGroup | ForEach-Object {
	
		Process-FacetedTermGroup -GroupConfig $_ -TermStore $TermStore 
	}
}

function Process-FacetedTermGroup()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		$GroupConfig,
		
		[Parameter(Mandatory=$true, Position=0)]
		$TermStore
	)
	
	$TermGroupName = $GroupConfig.Name
	Write-Verbose "TermGroup: $TermGroupName" 
	
	$GroupConfig.TermSet | ForEach-Object {
	
		Set-TermSetFacetedConfig -GroupName $TermGroupName -TermSetConfig $_ -TermStore $TermStore
	
	}
}

function Set-TermSetFacetedConfig()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		[string]$GroupName,
		
		[Parameter(Mandatory=$true, Position=1)]
		$TermSetConfig,
		
		[Parameter(Mandatory=$true, Position=1)]
		$TermStore
	)

	$TermSetName = $TermSetConfig.Name 
	
	Write-Verbose "`tTermSet: $TermSetName" 

	# Get the term set 
	$TermSet = Get-DSPTermSet -GroupName $GroupName -TermSetName $TermSetName -TermStore $TermStore
	
	# Set the term navigation enabled
	$TermSet.SetCustomProperty("_Sys_Facet_IsFacetedTermSet", "True")
	$TermSet.TermStore.CommitAll()	
				
	$TermSetConfig.Terms.Term | ForEach-Object {
	
		Set-TermFacetedConfig -TermSet $TermSet -TermConfig $_
	}
}

function Set-TermFacetedConfig()
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory=$true, Position=0)]
		$TermSet,
		
		[Parameter(Mandatory=$true, Position=1)]
		$TermConfig
	)


	$sortByConstants = @{"1" = "name"; "0"="count"; "2"="number"}
    $sortOrderConstants = @{"1" = "ascending"; "0"="descending"}	

	$TermName = $TermConfig.Name
	Write-Verbose "`t`tTerm: $TermName" 

	# Get the term from term set
	$Term = $TermSet.GetTerms($TermName, $false);
	
	if ($Term -ne $null)
	{
        $FullRefinementString= @()
        $RefinementConfig = @()

        $i = 0

        $TermConfig.Refiner | ForEach-Object {

            $RefinerName = $_.propertyName 

            Write-Verbose "`t`tRefiner: $RefinerName"

            if($_.type -eq "DateTime")
            {
				$Tommorow = ((Get-Date).ToUniversalTime().AddDays(1)).ToString("yyyy-MM-ddThh:mm:ssZ")
				$Today  = ((Get-Date).ToUniversalTime()).ToString("yyyy-MM-ddThh:mm:ssZ")
				$LastYear = ((Get-Date).ToUniversalTime().AddMonths(-12)).ToString("yyyy-MM-ddThh:mm:ssZ")
				$LastWeek = ((Get-Date).ToUniversalTime().AddDays(-7)).ToString("yyyy-MM-ddThh:mm:ssZ")
			
                $FullRefinementString += $_.propertyName +"(discretize=manual/"+ $LastYear +"/"+ $Tommorow +"/"+ $astWeek +"/"+ $Today +")"
				$Aliases ='["DocCreatedTm","urn:schemas-microsoft-com:office:office#Created","DAV:creationdate"]'
            }
            else
            {
                #ManagedPropertyName(sort=name/ascending,filter=5/0/*)
                $FullRefinementString += $_.propertyName +"(sort=" + $sortByConstants.Get_Item($_.sortBy) + "/" + $sortOrderConstants.Get_Item($_.sortOrder) +",filter=" + $_.maxNumberRefinementOptions +"/0/*)"
				$Aliases = "null"
            }

            $RefinementConfig += '"_Sys_Facet_RefinerConfig'+$i +'"'

            # Set custom property
            $Term.SetCustomProperty("_Sys_Facet_RefinerConfig"+$i, '{"sortBy":'+$_.sortBy + ',' +
                                                                        '"sortOrder":'+$_.sortOrder + ',' +
                                                                        '"maxNumberRefinementOptions":' + $_.maxNumberRefinementOptions + ',' +
                                                                        '"propertyName":"' + $_.propertyName + '",' +
                                                                        '"type":"' + $_.type + '",' +
                                                                        '"displayTemplate":"' + $_.displayTemplate + '",' +
																		'"displayName":"' + $_.displayName + '",' +
                                                                        '"useDefaultDateIntervals":' + $_.useDefaultDateIntervals + ',' +
                                                                        '"aliases":' + $Aliases + ',' +
                                                                        '"refinerSpecStringOverride":"' + $_.RefinerSpecStringOverride + '",' +
                                                                        '"intervals":' + $_.intervals +
                                                                        '}')
			$i++
        }

        $Term.SetCustomProperty("_Sys_Facet_FullRefinementString", ($FullRefinementString -join ','))
        $Term.SetCustomProperty("_Sys_Facet_RefinementConfig", "[" + ($RefinementConfig -join ',') + "]")

	}
	
	$Term.TermStore.CommitAll()
}