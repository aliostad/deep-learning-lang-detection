namespace Sunergeo.Kafka

type KafkaProducerAcknowledgments =
| Zero
| One
| All
[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module KafkaProducerAcknowledgments =
    let toString =
        function
        | KafkaProducerAcknowledgments.Zero -> "0"
        | One -> "1"
        | All -> "all"

type KafkaProducerConfig = {
    // A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping—this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).
    BootstrapHosts: KafkaHost list

    // The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are allowed:
    // acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1.
    // acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost.
    // acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting.
    Acks: KafkaProducerAcknowledgments

    // The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.
    // This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.
    BufferMemorySize: int

    // The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid values are none, gzip, snappy, or lz4. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).
    Compression: KafkaCompression

    // Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first.
    Retries: int

    // SslTrustStore: SslStore

    // The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes.
    // No attempt will be made to batch records larger than this size.
    // Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent.
    // A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.
    BatchSize: int

    // An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.
    ClientId: string

    // Close idle connections after the number of milliseconds specified by this config.
    ConnectionMaxIdleMs: int

    // The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay—that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absense of load.
    LingerMs: int

    // The configuration controls how long KafkaProducer.send() and KafkaProducer.partitionsFor() will block.These methods can be blocked either because the buffer is full or metadata unavailable.Blocking in the user-supplied serializers or partitioner will not be counted against this timeout.
    BlockMaxMs: int

    // The maximum size of a request in bytes. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests. This is also effectively a cap on the maximum record batch size. Note that the server has its own cap on record batch size which may be different from this.
    RequestMaxSize: int

    Partitioner: obj

    // The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.
    ReceiveBufferSize: int

    // The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.
    RequestTimeoutMs: int

    // The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.
    SendBufferSize: int

    // When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream. If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. This is set to 'false' by default. Note that enabling idempotence requires max.in.flight.requests.per.connection to be set to 1 and retries cannot be zero. Additionally acks must be set to 'all'. If these values are left at their defaults, we will override the default to be suitable. If the values are set to something incompatible with the idempotent producer, a ConfigException will be thrown.
    EnableIdempotence: bool

    // interceptor.classes

    // The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).
    InflightRequestsPerConnectionMax: int

    // The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.
    MetadataAgeMaxMs: int

    // metric.reporters
    // metrics.num.samples
    // metrics.recording.level	
    // metrics.sample.window.ms

    // The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.
    ReconnectBackoffMinMs: int

    // The maximum amount of time in milliseconds to wait when reconnectng to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.
    ReconnectBackoffMaxMs: int

    // The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.
    RetryBackoffMs: int

    // The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.If this value is larger than the max.transaction.timeout.ms setting in the broker, the request will fail with a `InvalidTransactionTimeout` error.
    TransactionTimeoutMs: int

    // The TransactionalId to use for transactional delivery. This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions. If no TransactionalId is provided, then the producer is limited to idempotent delivery. Note that enable.idempotence must be enabled if a TransactionalId is configured. The default is empty, which means transactions cannot be used.
    TransactionalId: string
} with 
    static member Default:KafkaProducerConfig =
        // https://kafka.apache.org/documentation/#producerconfigs
        {
            BootstrapHosts = List.empty
            Acks = KafkaProducerAcknowledgments.All    // custom (default 1)
            BufferMemorySize = 33554432
            Compression = KafkaCompression.None
            Retries = 0
            BatchSize = 16384
            ClientId = ""
            ConnectionMaxIdleMs = 540000
            LingerMs = 0
            BlockMaxMs = 60000
            RequestMaxSize = 1048576
            Partitioner = null
            ReceiveBufferSize = 32768
            RequestTimeoutMs = 30000
            SendBufferSize = 131072
            EnableIdempotence = true    // custom (default false)
            InflightRequestsPerConnectionMax = 1    // custom (default 5)
            MetadataAgeMaxMs = 300000
            ReconnectBackoffMaxMs = 1000
            ReconnectBackoffMinMs = 50
            RetryBackoffMs = 100
            TransactionTimeoutMs = 60000
            TransactionalId = ""
        }

[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module KafkaProducerConfig =
    let toKafkaConfig
        (config: KafkaProducerConfig)
        : System.Collections.Generic.IDictionary<string, obj> =
        ([
            "bootstrap.servers", 
                config.BootstrapHosts
                |> List.map KafkaHost.toString
                |> String.concat ","
                :> obj

            //"key.serializer", upcast "org.apache.kafka.common.serialization.StringSerializer"
            //"value.serializer", upcast "org.apache.kafka.common.serialization.StringSerializer"

            "acks", upcast (config.Acks |> KafkaProducerAcknowledgments.toString)

            //"buffer.memory", upcast config.BufferMemorySize

            //"compression.type", upcast (config.Compression |> KafkaCompression.toString) 

            "retries", upcast config.Retries

            //"batch.size", upcast config.BatchSize

            "client.id", upcast config.ClientId

            //"connections.max.idle.ms", upcast config.ConnectionMaxIdleMs

            "linger.ms", upcast config.LingerMs

            //"max.block.ms", upcast config.BlockMaxMs

            //"max.request.size", upcast config.RequestMaxSize

            //"partitioner.class", upcast config.Partitioner    // default key-based partitioner is what we want anyway

            //"receive.buffer.bytes", upcast config.ReceiveBufferSize

            "request.timeout.ms", upcast config.RequestTimeoutMs

            //"send.buffer.bytes", upcast config.SendBufferSize

            //"enable.idempotence", upcast config.EnableIdempotence         // WARNING

            "max.in.flight.requests.per.connection", upcast config.InflightRequestsPerConnectionMax

            "metadata.max.age.ms", upcast config.MetadataAgeMaxMs

            //"reconnect.backoff.max.ms", upcast config.ReconnectBackoffMaxMs
            //"reconnect.backoff.ms", upcast config.ReconnectBackoffMinMs

            "retry.backoff.ms", upcast config.RetryBackoffMs

            //"transaction.timeout.ms", upcast config.TransactionTimeoutMs
            //"transactional.id", upcast config.TransactionalId

            //"default.topic.config", upcast 
            //    [

            //    ]

        ] : List<string * obj>)
        |> dict