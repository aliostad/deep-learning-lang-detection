(ns powerweb.test.handler
  (:use clojure.test
        ring.mock.request
        powerweb.handler))

(deftest test-app
  (testing "main route"
    (let [response (app (request :get "/"))]
      (is (= (:status response) 200))
      (is (= "<!DOCTYPE html>\n<html>\n  <head>\n    <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>Welcome to powerweb</title>\n  </head>\n  <body>\n    <!-- navbar -->\n    <div class=\"navbar navbar-inverse navbar-fixed-top\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <a class=\"navbar-brand\" href=\"/\">powerweb</a>\n        </div>\n        <div class=\"navbar-collapse collapse \">\n          <ul class=\"nav navbar-nav\">\n            <li class=\"active\"><a href=\"/\">Home</a></li>\n            <li class=\"\"><a href=\"/about\">About</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container\">\n      \n  <div class=\"jumbotron\">\n    <h1>Welcome to powerweb</h1>\n    <p>Time to start building your site!</p>\n    <p><a class=\"btn btn-primary btn-lg\" href=\"http://luminusweb.net\">Learn more &raquo;</a></p>\n  </div>\n\n  <div class=\"row-fluid\">\n    <div class=\"span8\">\n    <h3>Managing Your Middleware</h3><p>Two middleware functions are provided by default in the <code>powerweb.middleware</code> namespace.</p><ul><li><code>log-request</code> - logs all requests using the debug level</li><li><code>template-error-page</code> - provides friendly formatting for Selmer errors in dev mode</li></ul><p>See the <code>:middleware</code> key of the <code>app</code> definition located in the <code>powerweb.handler</code> namespace to manage the enabled middleware.</p><h3>Here are some links to get started</h3><ol><li><a href='http://www.luminusweb.net/docs/html&#95;templating.md'>HTML templating</a></li><li><a href='http://www.luminusweb.net/docs/database.md'>Accessing the database</a></li><li><a href='http://www.luminusweb.net/docs/static&#95;resources.md'>Serving static resources</a></li><li><a href='http://www.luminusweb.net/docs/responses.md'>Setting response types</a></li><li><a href='http://www.luminusweb.net/docs/routes.md'>Defining routes</a></li><li><a href='http://www.luminusweb.net/docs/middleware.md'>Adding middleware</a></li><li><a href='http://www.luminusweb.net/docs/sessions&#95;cookies.md'>Sessions and cookies</a></li><li><a href='http://www.luminusweb.net/docs/security.md'>Security</a></li><li><a href='http://www.luminusweb.net/docs/deployment.md'>Deploying the application</a></li></ol>\n    </div>\n  </div>\n\n    </div>\n    <!-- scripts and styles -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css\">\n    <link href=\"/css/screen.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n    <script src=\"//code.jquery.com/jquery-2.1.1.min.js\" type=\"text/javascript\"></script>\n    <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\n\n    <script type=\"text/javascript\">\n      var context = \"\";\n    </script>\n    \n    \n  </body>\n</html>\n\n"
             (:body response)))))

  (testing "not-found route"
    (let [response (app (request :get "/invalid"))]
      (is (= (:status response) 404)))))
