package jp.co.canon_its.capl.canonical.model;

import java.io.Serializable;

/**
 * 処理手順項目 composite-id クラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class ProcessStepItemId implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** 画面. */
	private Screen screen;

	/** 処理. */
	private Process process;

	/** 処理手順. */
	private ProcessStep processStep;

	/** 処理手順項目編集. */
	private ProcessStepItemEdit processStepItemEdit;

	/** 処理項目種別. */
	private ProcessItemType processItemType;

	/** 処理項目. */
	private ProcessItem processItem;

	/**
	 * コンストラクタ.
	 */
	public ProcessStepItemId() {
	}

	/**
	 * 画面 を設定します.
	 * 
	 * @param screen
	 *            画面
	 */
	public void setScreen(Screen screen) {
		this.screen = screen;
	}

	/**
	 * 画面 を取得します.
	 * 
	 * @return 画面
	 */
	public Screen getScreen() {
		return this.screen;
	}

	/**
	 * 処理 を設定します.
	 * 
	 * @param process
	 *            処理
	 */
	public void setProcess(Process process) {
		this.process = process;
	}

	/**
	 * 処理 を取得します.
	 * 
	 * @return 処理
	 */
	public Process getProcess() {
		return this.process;
	}

	/**
	 * 処理手順 を設定します.
	 * 
	 * @param processStep
	 *            処理手順
	 */
	public void setProcessStep(ProcessStep processStep) {
		this.processStep = processStep;
	}

	/**
	 * 処理手順 を取得します.
	 * 
	 * @return 処理手順
	 */
	public ProcessStep getProcessStep() {
		return this.processStep;
	}

	/**
	 * 処理手順項目編集 を設定します.
	 * 
	 * @param processStepItemEdit
	 *            処理手順項目編集
	 */
	public void setProcessStepItemEdit(ProcessStepItemEdit processStepItemEdit) {
		this.processStepItemEdit = processStepItemEdit;
	}

	/**
	 * 処理手順項目編集 を取得します.
	 * 
	 * @return 処理手順項目編集
	 */
	public ProcessStepItemEdit getProcessStepItemEdit() {
		return this.processStepItemEdit;
	}

	/**
	 * 処理項目種別 を設定します.
	 * 
	 * @param processItemType
	 *            処理項目種別
	 */
	public void setProcessItemType(ProcessItemType processItemType) {
		this.processItemType = processItemType;
	}

	/**
	 * 処理項目種別 を取得します.
	 * 
	 * @return 処理項目種別
	 */
	public ProcessItemType getProcessItemType() {
		return this.processItemType;
	}

	/**
	 * 処理項目 を設定します.
	 * 
	 * @param processItem
	 *            処理項目
	 */
	public void setProcessItem(ProcessItem processItem) {
		this.processItem = processItem;
	}

	/**
	 * 処理項目 を取得します.
	 * 
	 * @return 処理項目
	 */
	public ProcessItem getProcessItem() {
		return this.processItem;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((screen == null) ? 0 : screen.hashCode());
		result = prime * result + ((process == null) ? 0 : process.hashCode());
		result = prime * result + ((processStep == null) ? 0 : processStep.hashCode());
		result = prime * result + ((processStepItemEdit == null) ? 0 : processStepItemEdit.hashCode());
		result = prime * result + ((processItemType == null) ? 0 : processItemType.hashCode());
		result = prime * result + ((processItem == null) ? 0 : processItem.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ProcessStepItemId other = (ProcessStepItemId) obj;
		if (screen == null) {
			if (other.screen != null) {
				return false;
			}
		} else if (!screen.equals(other.screen)) {
			return false;
		}
		if (process == null) {
			if (other.process != null) {
				return false;
			}
		} else if (!process.equals(other.process)) {
			return false;
		}
		if (processStep == null) {
			if (other.processStep != null) {
				return false;
			}
		} else if (!processStep.equals(other.processStep)) {
			return false;
		}
		if (processStepItemEdit == null) {
			if (other.processStepItemEdit != null) {
				return false;
			}
		} else if (!processStepItemEdit.equals(other.processStepItemEdit)) {
			return false;
		}
		if (processItemType == null) {
			if (other.processItemType != null) {
				return false;
			}
		} else if (!processItemType.equals(other.processItemType)) {
			return false;
		}
		if (processItem == null) {
			if (other.processItem != null) {
				return false;
			}
		} else if (!processItem.equals(other.processItem)) {
			return false;
		}
		return true;
	}

}
