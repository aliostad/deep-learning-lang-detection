#!/usr/local/bin/bash

#script to test if impute2 can be used to prephase  sequences on known haps
#ARGS passed
#$1=chr ($1)
#$2=ref_path ($2)
#$3=geno_path ($3)
#$4=out_path ($4)
#$5= phased ($5)

CHR=$1
chrom_start=`zcat $2/ALL_1000G_phase1integrated_v3_chr$1_impute.legend.gz | grep -v position | awk '{print $2}' | head -n 1`
chrom_end=`zcat $2/ALL_1000G_phase1integrated_v3_chr$1_impute.legend.gz | grep -v position | awk '{print $2}' | tail -n 1`


CHUNK_START=`printf "%.0f" $chrom_start`
CHUNK_END=`printf "%.0f" $chrom_end`
GENO_MODE=$8

# directories
REF_DATA_DIR=$2/
GENO_DATA_DIR=$3/
RESULTS_DIR=$4/

mkdir -p $RESULTS_DIR

# parameters
NE=20000
BUFFER=500
## MODIFY THE FOLLOWING THREE LINES TO ACCOMODATE OTHER PANELS
# reference data files
GENMAP_FILE=${REF_DATA_DIR}genetic_map_chr${CHR}_combined_b37.txt
HAPS_FILE=${REF_DATA_DIR}ALL_1000G_phase1integrated_v3_chr${CHR}_impute.hap.gz
LEGEND_FILE=${REF_DATA_DIR}ALL_1000G_phase1integrated_v3_chr${CHR}_impute.legend.gz
STRAND_g_FILE=${GENO_DATA_DIR}chr${CHR}.strand
GENO_FILE=${GENO_DATA_DIR}chr${CHR}.gen
SAMPLE_FILE=${GENO_DATA_DIR}chr${CHR}.sample

## THESE HAPLOTYPES WOULD BE GENERATED BY THE PREVIOUS SCRIPT
## SELECT ONE FROM METHOD-A AND METHOD-B BELOW
# METHOD-A: haplotypes from IMPUTE2 phasing run
#GWAS_HAPS_FILE=${RESULTS_DIR}gwas_data_chr${CHR}.pos${CHUNK_START}-${CHUNK_END}.phasing.impute2_haps

# METHOD-B: haplotypes from SHAPEIT phasing run
GWAS_HAPS_FILE=$5/valborbera_b37_chr${CHR}.haps

#once done this, we can generate our chunks and launch impute
#initilize the chunk counter
chunk_start=$chrom_start
chunk_count=0
chunk_end=0

IMPUTE="/nfs/users/nfs_p/pd3/sandbox/svn/impute2/impute2.2.2"

while [ $chunk_end -ne $chrom_end ]
do
        let chunk_count=$[chunk_count + 1]
        let chunk_end=$[chunk_start + 5000000 - 1]

        if [ $chunk_end -gt $chrom_end -o $chunk_end -eq $chrom_end ]
        then
                let chunk_end=$chrom_end
        fi
        echo -e "Processing CHROMOSOME ${CHR} ....\nCreated chunk $chunk_count \nStart: $chunk_start \nEnd: $chunk_end"
	# main output file
	OUTPUT_FILE=${RESULTS_DIR}chr${CHR}.$chunk_count.gen

        chr=$CHR
        start=$chunk_start
        end=$chunk_end
	
	CHUNK_START=`printf "%.0f" $start`
	CHUNK_END=`printf "%.0f" $end`

        if [ $chunk_count -lt 10 ]
        then
                chunk_n="0$chunk_count"
        else
                chunk_n=$chunk_count
        fi

#bsub -J "phase_gen" -o "%J_phase_gen.log" -e "%J_phase_gen.err" -G team151 -M8000000 -R"select[mem>8000] rusage[mem=8000]" -q basement -- $IMPUTE -phase -m $GENMAP_FILE -h $HAPS_FILE -l $LEGEND_FILE -g $GENO_FILE -known_haps_g $GWAS_HAPS_FILE -int $CHUNK_START $CHUNK_END -Ne $NE -o $OUTPUT_FILE -o_gz -buffer $BUFFER -allow_large_regions -seed 367946 -verbose

#bsub -J "phase_gen" -o "%J_phase_gen.log" -e "%J_phase_gen.err" -G team151 -M8000000 -R"select[mem>8000] rusage[mem=8000]" -q basement -- $IMPUTE -phase -m $GENMAP_FILE -h $HAPS_FILE -l $LEGEND_FILE -g $GENO_FILE -int $CHUNK_START $CHUNK_END -Ne $NE -o $OUTPUT_FILE -o_gz -buffer $BUFFER -allow_large_regions -seed 367946 -verbose
 
#bsub -J "phase_gen_no_ref" -o "%J_phase_gen_no_ref.log" -e "%J_phase_gen_no_ref.err" -G team151 -M8000000 -R"select[mem>8000] rusage[mem=8000]" -q basement -- $IMPUTE -phase -m $GENMAP_FILE -g $GENO_FILE -int $CHUNK_START $CHUNK_END -Ne $NE -o $OUTPUT_FILE -o_gz -buffer $BUFFER -allow_large_regions -seed 367946 -verbose

#bsub -J "phase_gen_no_ref_scaffold" -o "%J_phase_gen_no_ref_scaffold.log" -e "%J_phase_gen_no_ref_scaffold.err" -G team151 -M8000000 -R"select[mem>8000] rusage[mem=8000]" -q basement -- $IMPUTE -phase -m $GENMAP_FILE -g $GENO_FILE -known_haps_g $GWAS_HAPS_FILE -int $CHUNK_START $CHUNK_END -Ne $NE -o $OUTPUT_FILE -o_gz -buffer $BUFFER -allow_large_regions -seed 367946 -verbose

bsub -J "phase_gen_110_ref_scaffold" -o "%J_phase_gen_110_ref_scaffold.log" -e "%J_phase_gen_110_ref_scaffold.err" -G team151 -M8000000 -R"select[mem>8000] rusage[mem=8000]" -q basement -- $IMPUTE -phase -m $GENMAP_FILE -g $GENO_FILE -known_haps_g $GWAS_HAPS_FILE -int $CHUNK_START $CHUNK_END -Ne $NE -o $OUTPUT_FILE -o_gz -buffer $BUFFER -allow_large_regions -seed 367946 -verbose
        let chunk_start=$[chunk_end + 1]
done

