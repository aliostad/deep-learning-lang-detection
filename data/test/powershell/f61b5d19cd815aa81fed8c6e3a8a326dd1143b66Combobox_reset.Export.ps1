#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: dab5d68e-c98b-4cc4-8f62-b0b7b421a6e1
# Source File: C:\Users\Francois-Xavier\SkyDrive\Scripts\PowerShell\GitHub\PowerShellGUI\WinForm_Tips\Combobox_reset.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
uQwAAB+LCAAAAAAABADFV11v2jAUfZ+0/2DlOSKEED6kEIlCK1VjW1VYt7fKSS6dh2Mj26Gkv37O
BywttISJUiEBdu7xufce+xi8Wwj5CkQ6xgoj/UUSzgZGy/A/f0LI+y7IA2GYXhEK33AM/ojHAQ/4
+l6ABNVYyrln7QQV0OAPhAqpdAkDY5pKBXHjJ2ERf5SNKy7i4t1E+x6Z6K7MpN1oZi8TjRKqEgED
BokSmJroJgkoCb9AOuMLYIOg28Vu6HbsvtOGZq9vIKZTGRhzvd4EP6V6/WEUExby2EDhb0IjoVHG
iDMlOJVFvTrtG8GXIFRawkeUAFNT8gSG33L7JnKbnrWJeQWT9cDw9xAfRM5grQy/imrshV2udFIl
ZsJxtJftPnviWXnsBnhYlFzgC75+d2HCcifZb8mx26KxHo75I5uqlOoub4YTItVOn3bRWRFYKcIe
LhkOKOjOzUQCNZDXuheVtHRANvO8k1Ml9MomimXIBSXBKbrlZzS2Z2UfH8Te+lB250PZ2y/Ya+yU
CQ+x0tSGb7dMZLdqQArH2J6IGojCkWy3Z6JWnfgZDq5ZBGuN2bUTq7CF+iZxkSjF2btbRJDT3GY3
zXEmUZGg29Ea7Hr2axpUKGur0HW1CM5RItRJqLgMRM1Ufki4IzLBNDfGCxwuRpxy8bq/Ve8QfcuF
i2fF3+dTL26P6j55PhhKCbHWFOQmtpxJ/XKPfMUMP0CsV2sME8XjXJ9/e8Wuu1ccO5g7PbeDI6fT
Bsf1rC3TS+YTmsEbLEV95+A4+Tk7zJj9KjwPkcCPuYMfz9V05u68O7ftyG1iBx/m+hXT89REhD4g
XKRTECsSwn9JdnR1Iy7gLOWVVWln0aW9Q23bYeEqnlX9q+L/BflCTfK5DAAA#>
#endregion
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.53
# Generated On: 2014-04-07 10:10 PM
# Generated By: Francois-Xavier Cat
# Organization: LazyWinAdmin.com
#========================================================================
#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-Combobox_reset_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLazyWinAdmincom = New-Object 'System.Windows.Forms.Form'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$buttonReset = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	
	
	
	
	
	$formLazyWinAdmincom_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$buttonReset_Click={
		$combobox1.SelectedIndex = -1
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLazyWinAdmincom.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonReset.remove_Click($buttonReset_Click)
			$formLazyWinAdmincom.remove_Load($formLazyWinAdmincom_Load)
			$formLazyWinAdmincom.remove_Load($Form_StateCorrection_Load)
			$formLazyWinAdmincom.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formLazyWinAdmincom.SuspendLayout()
	#
	# formLazyWinAdmincom
	#
	$formLazyWinAdmincom.Controls.Add($combobox1)
	$formLazyWinAdmincom.Controls.Add($buttonReset)
	$formLazyWinAdmincom.ClientSize = '259, 50'
	$formLazyWinAdmincom.Name = "formLazyWinAdmincom"
	$formLazyWinAdmincom.Text = "LazyWinAdmin.com"
	$formLazyWinAdmincom.add_Load($formLazyWinAdmincom_Load)
	#
	# combobox1
	#
	$combobox1.DropDownStyle = 'DropDownList'
	$combobox1.FormattingEnabled = $True
	[void]$combobox1.Items.Add("Item1")
	[void]$combobox1.Items.Add("Item2")
	[void]$combobox1.Items.Add("Item3")
	[void]$combobox1.Items.Add("Item4")
	$combobox1.Location = '12, 12'
	$combobox1.Name = "combobox1"
	$combobox1.Size = '158, 21'
	$combobox1.TabIndex = 1
	#
	# buttonReset
	#
	$buttonReset.Location = '176, 10'
	$buttonReset.Name = "buttonReset"
	$buttonReset.Size = '75, 23'
	$buttonReset.TabIndex = 0
	$buttonReset.Text = "reset"
	$buttonReset.UseVisualStyleBackColor = $True
	$buttonReset.add_Click($buttonReset_Click)
	$formLazyWinAdmincom.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLazyWinAdmincom.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLazyWinAdmincom.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLazyWinAdmincom.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formLazyWinAdmincom.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-Combobox_reset_psf | Out-Null
	#Perform cleanup
	OnApplicationExit
}
