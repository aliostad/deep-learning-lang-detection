// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/micro/go-micro/broker (interfaces: Broker)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	broker "github.com/micro/go-micro/broker"
)

// Mock of Broker interface
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *_MockBrokerRecorder
}

// Recorder for MockBroker (not exported)
type _MockBrokerRecorder struct {
	mock *MockBroker
}

func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &_MockBrokerRecorder{mock}
	return mock
}

func (_m *MockBroker) EXPECT() *_MockBrokerRecorder {
	return _m.recorder
}

func (_m *MockBroker) Address() string {
	ret := _m.ctrl.Call(_m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockBrokerRecorder) Address() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Address")
}

func (_m *MockBroker) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBrokerRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockBroker) Disconnect() error {
	ret := _m.ctrl.Call(_m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBrokerRecorder) Disconnect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Disconnect")
}

func (_m *MockBroker) Init(_param0 ...broker.Option) error {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Init", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBrokerRecorder) Init(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0...)
}

func (_m *MockBroker) Options() broker.Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(broker.Options)
	return ret0
}

func (_mr *_MockBrokerRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Options")
}

func (_m *MockBroker) Publish(_param0 string, _param1 *broker.Message, _param2 ...broker.PublishOption) error {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Publish", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBrokerRecorder) Publish(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", _s...)
}

func (_m *MockBroker) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockBrokerRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

func (_m *MockBroker) Subscribe(_param0 string, _param1 broker.Handler, _param2 ...broker.SubscribeOption) (broker.Subscriber, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Subscribe", _s...)
	ret0, _ := ret[0].(broker.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBrokerRecorder) Subscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", _s...)
}
