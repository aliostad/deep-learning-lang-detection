package bytecode

import "go/token"

func LookupOpFromKind(t token.Token) string {
	s := ""
	switch t {
	case token.STRING:
		s = "String"
	case token.CHAR:
		s = "String"
	case token.INT:
		s = "Int"
	case token.FLOAT:
		s = "Double"
	case token.ADD:
		s = "Add"
	case token.SUB:
		s = "Sub"
	case token.MUL:
		s = "Mul"
	case token.QUO:
		s = "Div"
	case token.REM:
		s = "Mod"
	case token.AND:     // &
		s = "BitAnd"
	case token.OR:        // |
		s = "BitOr"
	case token.XOR:     // ^
		s = "BitXor"
	case token.SHL:     // <<
		s = "Shl"
	case token.SHR:     // >>
		s = "Shr"
	case token.EQL:    // ==
		s = "Eq"
	case token.LSS:    // <
		s = "Lt"
	case token.GTR:    // >
		s = "Gt"
	case token.NOT:   // !
		s = "Not"
	case token.NEQ:      // !=
		s = "Neq"
	case token.LEQ:      // <=
		s = "Lte"
	case token.GEQ:      // >=
		s = "Gte"
	default:
		panic("Token not supported")
	}
	return s
}

func LookupStackDelta(bc string) int {
	switch bc {
	case "Nop":
		return 0
	case "PopA":
		return -1
	case "PopC":
		return -1
	case "PopV":
		return -1
	case "PopR":
		return -1
	case "Dup":
		return 1
	case "Box":
		return 0
	case "Unbox":
		return 0
	case "BoxR":
		return 0
	case "BoxRNop":
		return 0
	case "UnboxR":
		return 0
	case "UnboxRNop":
		return 0
	case "Null":
		return 1
	case "True":
		return 1
	case "False":
		return 1
	case "NullUninit":
		return 1
	case "Int":
		return 1
	case "Double":
		return 1
	case "String":
		return 1
	case "Array":
		return 1
	case "NewArray":
		return 1
	case "NewArrayReserve":
		return 1
	case "NewPackedArray":
		return 0
	case "NewStructArray":
		return 0
	case "AddElemC":
		return -2
	case "AddElemV":
		return -2
	case "AddNewElemC":
		return -1
	case "AddNewElemV":
		return -1
	case "NewCol":
		return 1
	case "ColAddElemC":
		return -2
	case "ColAddNewElemC":
		return -1
	case "Cns":
		return 1
	case "CnsE":
		return 1
	case "CnsU":
		return 1
	case "ClsCns":
		return 1
	case "ClsCnsD":
		return 2
	case "File":
		return 1
	case "Dir":
		return 1
	case "Concat":
		return -1
	case "Abs":
		return 0
	case "Add":
		return -1
	case "Div":
		return -1
	case "Mod":
		return -1
	case "Sqrt":
		return 0
	case "Strlen":
		return 0
	case "Xor":
		return -1
	case "Not":
		return 0
	case "Same":
		return -1
	case "NSame":
		return -1
	case "Eq":
		return -1
	case "Neq":
		return -1
	case "Lt":
		return -1
	case "Lte":
		return -1
	case "Gt":
		return -1
	case "Gte":
		return -1
	case "Shl":
		return -1
	case "Shr":
		return -1
	case "Floor":
		return 0
	case "Ceil":
		return 0
	case "CastBool":
		return 0
	case "CastInt":
		return 0
	case "CastDouble":
		return 0
	case "CastString":
		return 0
	case "CastArray":
		return 0
	case "CastObject":
		return 0
	case "InstanceOf":
		return -1
	case "InstanceOfD":
		return 0
	case "Print":
		return 0
	case "Clone":
		return 0
	case "Exit":
		return 0
	case "Fatal":
		return -1
	case "Jmp":
		return 0
	case "JmpNS":
		return 0
	case "JmpZ":
		return -1
	case "JmpNZ":
		return -1
	case "Switch":
		return -1
	case "SSwitch":
		return -1
	case "RetC":
		return -1
	case "RetV":
		return -1
	case "Unwind":
		return 0
	case "Throw":
		return -1
	case "CGetL":
		return 1
	case "CGetL2":
		return 1
	case "CGetL3":
		return 1
	case "PushL":
		return 1
	case "CGetN":
		return 0
	case "CGetG":
		return 0
	case "CGetS":
		return -1
	case "VGetL":
		return 1
	case "VGetN":
		return 0
	case "VGetG":
		return 0
	case "VGetS":
		return -1
	case "AGetC":
		return 0
	case "AGetL":
		return 1
	case "IssetC":
		return 0
	case "IssetL":
		return 1
	case "IssetN":
		return 0
	case "IssetG":
		return 0
	case "IssetS":
		return -1
	case "EmptyL":
		return 1
	case "EmptyN":
		return 0
	case "EmptyG":
		return 0
	case "EmptyS":
		return -1
	case "IsTypeC":
		return 0
	case "IsTypeL":
		return 1
	case "SetL":
		return 0
	case "SetN":
		return -1
	case "SetG":
		return -1
	case "SetS":
		return -2
	case "SetOpL":
		return 0
	case "SetOpN":
		return -1
	case "SetOpG":
		return -1
	case "SetOpS":
		return -2
	case "IncDecL":
		return 1
	case "IncDecN":
		return 0
	case "IncDecG":
		return 0
	case "IncDecS":
		return -1
	case "BindL":
		return 0
	case "BindN":
		return -1
	case "BindG":
		return -1
	case "BindS":
		return -2
	case "UnsetL":
		return 0
	case "UnsetN":
		return -1
	case "UnsetG":
		return -1
	case "FPushFunc":
		return -1
	case "FPushFuncD":
		return 0
	case "FPushFuncU":
		return 0
	case "FPushObjMethod":
		return -2
	case "FPushObjMethodD":
		return -1
	case "FPushClsMethod":
		return -2
	case "FPushClsMethodF":
		return -2
	case "FPushClsMethodD":
		return 0
	case "FPushCtor":
		return 0
	case "FPushCtorD":
		return 1
	case "DecodeCufIter":
		return -1
	case "FPushCufIter":
		return 0
	case "FPushCuf":
		return -1
	case "FPushCufF":
		return -1
	case "FPushCufSafe":
		return 0
	case "CufSafeArray":
		return -2
	case "CufSafeReturn":
		return -2
	case "FPassC":
		return 0
	case "FPassCW":
		return 0
	case "FPassCE":
		return 0
	case "FPassV":
		return 0
	case "FPassVNop":
		return 0
	case "FPassR":
		return 0
	case "FPassL":
		return 1
	case "FPassN":
		return 0
	case "FPassG":
		return 0
	case "FPassS":
		return -1
	case "FCall":
		return 0
	case "FCallArray":
		return 0
	case "FCallBuiltin":
		return 0
	case "BaseC":
		return 0
	case "BaseR":
		return 0
	case "BaseL":
		return 1
	case "BaseLW":
		return 1
	case "BaseLD":
		return 1
	case "BaseLWD":
		return 1
	case "BaseNC":
		return 0
	case "BaseNL":
		return 1
	case "BaseNCW":
		return 0
	case "BaseNLW":
		return 1
	case "BaseNCD":
		return 0
	case "BaseNLD":
		return 1
	case "BaseNCWD":
		return 0
	case "BaseNLWD":
		return 1
	case "BaseGC":
		return 0
	case "BaseGL":
		return 1
	case "BaseGCW":
		return 0
	case "BaseGLW":
		return 1
	case "BaseGCD":
		return 0
	case "BaseGLD":
		return 1
	case "BaseGCWD":
		return 0
	case "BaseGLWD":
		return 1
	case "BaseSC":
		return -1
	case "BaseSL":
		return 0
	case "BaseH":
		return 1
	case "ElemC":
		return -1
	case "ElemL":
		return 0
	case "ElemCW":
		return -1
	case "ElemLW":
		return 0
	case "ElemCD":
		return -1
	case "ElemLD":
		return 0
	case "ElemCWD":
		return -1
	case "ElemLWD":
		return 0
	case "ElemCU":
		return -1
	case "ElemLU":
		return 0
	case "NewElem":
		return 0
	case "PropC":
		return -1
	case "PropL":
		return 0
	case "PropCW":
		return -1
	case "PropLW":
		return 0
	case "PropCD":
		return -1
	case "PropLD":
		return 0
	case "PropCWD":
		return -1
	case "PropLWD":
		return 0
	case "PropCU":
		return -1
	case "PropLU":
		return 0
	case "CGetElemC":
		return -1
	case "CGetElemL":
		return 0
	case "VGetElemC":
		return -1
	case "VGetElemL":
		return 0
	case "IssetElemC":
		return -1
	case "IssetElemL":
		return 0
	case "EmptyElemC":
		return -1
	case "EmptyElemL":
		return 0
	case "SetElemC":
		return -2
	case "SetElemL":
		return -1
	case "SetOpElemC":
		return -2
	case "SetOpElemL":
		return -1
	case "IncDecElemC":
		return -1
	case "IncDecElemL":
		return 0
	case "BindElemC":
		return -2
	case "BindElemL":
		return -1
	case "UnsetElemC":
		return -2
	case "UnsetElemL":
		return -1
	case "VGetNewElem":
		return 0
	case "SetNewElem":
		return -1
	case "SetOpNewElem":
		return -1
	case "IncDecNewElem":
		return 0
	case "BindNewElem":
		return -1
	case "CGetPropC":
		return -1
	case "CGetPropL":
		return 0
	case "VGetPropC":
		return -1
	case "VGetPropL":
		return 0
	case "IssetPropC":
		return -1
	case "IssetPropL":
		return 0
	case "EmptyPropC":
		return -1
	case "EmptyPropL":
		return 0
	case "SetPropC":
		return -2
	case "SetPropL":
		return -1
	case "SetOpPropC":
		return -2
	case "SetOpPropL":
		return -1
	case "IncDecPropC":
		return -1
	case "IncDecPropL":
		return 0
	case "BindPropC":
		return -2
	case "BindPropL":
		return -1
	case "UnsetPropC":
		return -2
	case "UnsetPropL":
		return -1
	case "CGetM":
		return 0
	case "VGetM":
		return 0
	case "FPassM":
		return 0
	case "IssetM":
		return 0
	case "EmptyM":
		return 0
	case "SetM":
		return -1
	case "SetWithRefLM":
		return -1
	case "SetWithRefRM":
		return -2
	case "SetOpM":
		return -1
	case "IncDecM":
		return 0
	case "BindM":
		return -1
	case "UnsetM":
		return -1
	case "IterInit":
		return -1
	case "IterInitK":
		return -1
	case "WIterInit":
		return -1
	case "WIterInitK":
		return -1
	case "MIterInit":
		return -1
	case "MIterInitK":
		return -1
	case "IterNext":
		return 0
	case "IterNextK":
		return 0
	case "WIterNext":
		return 0
	case "WIterNextK":
		return 0
	case "MIterNext":
		return 0
	case "MIterNextK":
		return 0
	case "IterFree":
		return 0
	case "MIterFree":
		return 0
	case "CIterFree":
		return 0
	case "IterBreak":
		return 0
	case "Incl":
		return 0
	case "InclOnce":
		return 0
	case "Req":
		return 0
	case "ReqOnce":
		return 0
	case "ReqDoc":
		return 0
	case "Eval":
		return 0
	case "DefFunc":
		return 0
	case "DefCls":
		return 0
	case "NopDefCls":
		return 0
	case "DefCns":
		return 0
	case "DefTypeAlias":
		return 0
	case "This":
		return 1
	case "BareThis":
		return 1
	case "CheckThis":
		return 0
	case "InitThisLoc":
		return 0
	case "StaticLoc":
		return 1
	case "StaticLocInit":
		return -1
	case "Catch":
		return 1
	case "ClassExists":
		return -1
	case "InterfaceExists":
		return -1
	case "TraitExists":
		return -1
	case "VerifyParamType":
		return 0
	case "Self":
		return 1
	case "Parent":
		return 1
	case "LateBoundCls":
		return 1
	case "NativeImpl":
		return 0
	case "IncStat":
		return 0
	case "AKExists":
		return -1
	case "CreateCl":
		return 0
	case "Idx":
		return -2
	case "ArrayIdx":
		return -2
	case "AssertTL":
		return 0
	case "AssertTStk":
		return 0
	case "AssertObjL":
		return 0
	case "AssertObjStk":
		return 0
	case "PredictTL":
		return 0
	case "PredictTStk":
		return 0
	case "BreakTraceHint":
		return 0
	case "CreateCont":
		return 1
	case "ContEnter":
		return -1
	case "ContSuspend":
		return -1
	case "ContSuspendK":
		return -2
	case "UnpackCont":
		return 2
	case "ContRetC":
		return -1
	case "ContCheck":
		return 0
	case "ContRaise":
		return 0
	case "ContValid":
		return 1
	case "ContKey":
		return 1
	case "ContCurrent":
		return 1
	case "ContStopped":
		return 0
	case "ContHandle":
		return -1
	case "AsyncAwait":
		return 1
	case "AsyncESuspend":
		return 0
	case "AsyncWrapResult":
		return 0
	case "AsyncWrapException":
		return 0
	default:
	}
	return 0
}
