// NOTE: this file is AUTOGENERATED by genwritefield.

package jsonwriter

import "fmt"

func (w *Writer) WriteField(key string, value interface{}) {
	w.WriteKey(key)
	switch v := value.(type) {
	case string:
		w.WriteString(v)
	case *string:
		w.WriteString(*v)
	case int:
		w.WriteInt64(int64(v))
	case *int:
		w.WriteInt64(int64(*v))
	case int64:
		w.WriteInt64(v)
	case *int64:
		w.WriteInt64(*v)
	case uint64:
		w.WriteInt64(int64(v))
	case *uint64:
		w.WriteInt64(int64(*v))
	case int32:
		w.WriteInt64(int64(v))
	case *int32:
		w.WriteInt64(int64(*v))
	case uint32:
		w.WriteInt64(int64(v))
	case *uint32:
		w.WriteInt64(int64(*v))
	case int16:
		w.WriteInt64(int64(v))
	case *int16:
		w.WriteInt64(int64(*v))
	case uint16:
		w.WriteInt64(int64(v))
	case *uint16:
		w.WriteInt64(int64(*v))
	case int8:
		w.WriteInt64(int64(v))
	case *int8:
		w.WriteInt64(int64(*v))
	case uint8:
		w.WriteInt64(int64(v))
	case *uint8:
		w.WriteInt64(int64(*v))
	case float64:
		w.WriteFloat64(v)
	case *float64:
		w.WriteFloat64(*v)
	case float32:
		w.WriteFloat64(float64(v))
	case *float32:
		w.WriteFloat64(float64(*v))
	case bool:
		w.WriteBool(v)
	case *bool:
		w.WriteBool(*v)
	case Marshaler:
		v.MarshalJSONTo(w)
	default:
		panic(fmt.Sprintf("invalid type %T", value))
	}
}
