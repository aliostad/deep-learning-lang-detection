package input

import (
	"github.com/neelance/cdp-go/rpc"
)

type Client struct {
	*rpc.Client
}

// (experimental)

type TouchPoint struct {
	// State of the touch point.
	State string `json:"state"`

	// X coordinate of the event relative to the main frame's viewport.
	X int `json:"x"`

	// Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Y int `json:"y"`

	// X radius of the touch area (default: 1). (optional)
	RadiusX int `json:"radiusX,omitempty"`

	// Y radius of the touch area (default: 1). (optional)
	RadiusY int `json:"radiusY,omitempty"`

	// Rotation angle (default: 0.0). (optional)
	RotationAngle float64 `json:"rotationAngle,omitempty"`

	// Force (default: 1.0). (optional)
	Force float64 `json:"force,omitempty"`

	// Identifier used to track touch sources between events, must be unique within an event. (optional)
	Id float64 `json:"id,omitempty"`
}

// (experimental)

type GestureSourceType string

type SetIgnoreInputEventsRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Ignores input events (useful while auditing page).
func (d *Client) SetIgnoreInputEvents() *SetIgnoreInputEventsRequest {
	return &SetIgnoreInputEventsRequest{opts: make(map[string]interface{}), client: d.Client}
}

// Ignores input events processing when set to true.
func (r *SetIgnoreInputEventsRequest) Ignore(v bool) *SetIgnoreInputEventsRequest {
	r.opts["ignore"] = v
	return r
}

func (r *SetIgnoreInputEventsRequest) Do() error {
	return r.client.Call("Input.setIgnoreInputEvents", r.opts, nil)
}

type DispatchKeyEventRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Dispatches a key event to the page.
func (d *Client) DispatchKeyEvent() *DispatchKeyEventRequest {
	return &DispatchKeyEventRequest{opts: make(map[string]interface{}), client: d.Client}
}

// Type of the key event.
func (r *DispatchKeyEventRequest) Type(v string) *DispatchKeyEventRequest {
	r.opts["type"] = v
	return r
}

// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). (optional)
func (r *DispatchKeyEventRequest) Modifiers(v int) *DispatchKeyEventRequest {
	r.opts["modifiers"] = v
	return r
}

// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). (optional)
func (r *DispatchKeyEventRequest) Timestamp(v float64) *DispatchKeyEventRequest {
	r.opts["timestamp"] = v
	return r
}

// Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "") (optional)
func (r *DispatchKeyEventRequest) Text(v string) *DispatchKeyEventRequest {
	r.opts["text"] = v
	return r
}

// Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: ""). (optional)
func (r *DispatchKeyEventRequest) UnmodifiedText(v string) *DispatchKeyEventRequest {
	r.opts["unmodifiedText"] = v
	return r
}

// Unique key identifier (e.g., 'U+0041') (default: ""). (optional)
func (r *DispatchKeyEventRequest) KeyIdentifier(v string) *DispatchKeyEventRequest {
	r.opts["keyIdentifier"] = v
	return r
}

// Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: ""). (optional)
func (r *DispatchKeyEventRequest) Code(v string) *DispatchKeyEventRequest {
	r.opts["code"] = v
	return r
}

// Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: ""). (optional)
func (r *DispatchKeyEventRequest) Key(v string) *DispatchKeyEventRequest {
	r.opts["key"] = v
	return r
}

// Windows virtual key code (default: 0). (optional)
func (r *DispatchKeyEventRequest) WindowsVirtualKeyCode(v int) *DispatchKeyEventRequest {
	r.opts["windowsVirtualKeyCode"] = v
	return r
}

// Native virtual key code (default: 0). (optional)
func (r *DispatchKeyEventRequest) NativeVirtualKeyCode(v int) *DispatchKeyEventRequest {
	r.opts["nativeVirtualKeyCode"] = v
	return r
}

// Whether the event was generated from auto repeat (default: false). (optional)
func (r *DispatchKeyEventRequest) AutoRepeat(v bool) *DispatchKeyEventRequest {
	r.opts["autoRepeat"] = v
	return r
}

// Whether the event was generated from the keypad (default: false). (optional)
func (r *DispatchKeyEventRequest) IsKeypad(v bool) *DispatchKeyEventRequest {
	r.opts["isKeypad"] = v
	return r
}

// Whether the event was a system key event (default: false). (optional)
func (r *DispatchKeyEventRequest) IsSystemKey(v bool) *DispatchKeyEventRequest {
	r.opts["isSystemKey"] = v
	return r
}

func (r *DispatchKeyEventRequest) Do() error {
	return r.client.Call("Input.dispatchKeyEvent", r.opts, nil)
}

type DispatchMouseEventRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Dispatches a mouse event to the page.
func (d *Client) DispatchMouseEvent() *DispatchMouseEventRequest {
	return &DispatchMouseEventRequest{opts: make(map[string]interface{}), client: d.Client}
}

// Type of the mouse event.
func (r *DispatchMouseEventRequest) Type(v string) *DispatchMouseEventRequest {
	r.opts["type"] = v
	return r
}

// X coordinate of the event relative to the main frame's viewport.
func (r *DispatchMouseEventRequest) X(v int) *DispatchMouseEventRequest {
	r.opts["x"] = v
	return r
}

// Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
func (r *DispatchMouseEventRequest) Y(v int) *DispatchMouseEventRequest {
	r.opts["y"] = v
	return r
}

// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). (optional)
func (r *DispatchMouseEventRequest) Modifiers(v int) *DispatchMouseEventRequest {
	r.opts["modifiers"] = v
	return r
}

// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). (optional)
func (r *DispatchMouseEventRequest) Timestamp(v float64) *DispatchMouseEventRequest {
	r.opts["timestamp"] = v
	return r
}

// Mouse button (default: "none"). (optional)
func (r *DispatchMouseEventRequest) Button(v string) *DispatchMouseEventRequest {
	r.opts["button"] = v
	return r
}

// Number of times the mouse button was clicked (default: 0). (optional)
func (r *DispatchMouseEventRequest) ClickCount(v int) *DispatchMouseEventRequest {
	r.opts["clickCount"] = v
	return r
}

func (r *DispatchMouseEventRequest) Do() error {
	return r.client.Call("Input.dispatchMouseEvent", r.opts, nil)
}

type DispatchTouchEventRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Dispatches a touch event to the page. (experimental)
func (d *Client) DispatchTouchEvent() *DispatchTouchEventRequest {
	return &DispatchTouchEventRequest{opts: make(map[string]interface{}), client: d.Client}
}

// Type of the touch event.
func (r *DispatchTouchEventRequest) Type(v string) *DispatchTouchEventRequest {
	r.opts["type"] = v
	return r
}

// Touch points.
func (r *DispatchTouchEventRequest) TouchPoints(v []*TouchPoint) *DispatchTouchEventRequest {
	r.opts["touchPoints"] = v
	return r
}

// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). (optional)
func (r *DispatchTouchEventRequest) Modifiers(v int) *DispatchTouchEventRequest {
	r.opts["modifiers"] = v
	return r
}

// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). (optional)
func (r *DispatchTouchEventRequest) Timestamp(v float64) *DispatchTouchEventRequest {
	r.opts["timestamp"] = v
	return r
}

func (r *DispatchTouchEventRequest) Do() error {
	return r.client.Call("Input.dispatchTouchEvent", r.opts, nil)
}

type EmulateTouchFromMouseEventRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Emulates touch event from the mouse event parameters. (experimental)
func (d *Client) EmulateTouchFromMouseEvent() *EmulateTouchFromMouseEventRequest {
	return &EmulateTouchFromMouseEventRequest{opts: make(map[string]interface{}), client: d.Client}
}

// Type of the mouse event.
func (r *EmulateTouchFromMouseEventRequest) Type(v string) *EmulateTouchFromMouseEventRequest {
	r.opts["type"] = v
	return r
}

// X coordinate of the mouse pointer in DIP.
func (r *EmulateTouchFromMouseEventRequest) X(v int) *EmulateTouchFromMouseEventRequest {
	r.opts["x"] = v
	return r
}

// Y coordinate of the mouse pointer in DIP.
func (r *EmulateTouchFromMouseEventRequest) Y(v int) *EmulateTouchFromMouseEventRequest {
	r.opts["y"] = v
	return r
}

// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
func (r *EmulateTouchFromMouseEventRequest) Timestamp(v float64) *EmulateTouchFromMouseEventRequest {
	r.opts["timestamp"] = v
	return r
}

// Mouse button.
func (r *EmulateTouchFromMouseEventRequest) Button(v string) *EmulateTouchFromMouseEventRequest {
	r.opts["button"] = v
	return r
}

// X delta in DIP for mouse wheel event (default: 0). (optional)
func (r *EmulateTouchFromMouseEventRequest) DeltaX(v float64) *EmulateTouchFromMouseEventRequest {
	r.opts["deltaX"] = v
	return r
}

// Y delta in DIP for mouse wheel event (default: 0). (optional)
func (r *EmulateTouchFromMouseEventRequest) DeltaY(v float64) *EmulateTouchFromMouseEventRequest {
	r.opts["deltaY"] = v
	return r
}

// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). (optional)
func (r *EmulateTouchFromMouseEventRequest) Modifiers(v int) *EmulateTouchFromMouseEventRequest {
	r.opts["modifiers"] = v
	return r
}

// Number of times the mouse button was clicked (default: 0). (optional)
func (r *EmulateTouchFromMouseEventRequest) ClickCount(v int) *EmulateTouchFromMouseEventRequest {
	r.opts["clickCount"] = v
	return r
}

func (r *EmulateTouchFromMouseEventRequest) Do() error {
	return r.client.Call("Input.emulateTouchFromMouseEvent", r.opts, nil)
}

type SynthesizePinchGestureRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Synthesizes a pinch gesture over a time period by issuing appropriate touch events. (experimental)
func (d *Client) SynthesizePinchGesture() *SynthesizePinchGestureRequest {
	return &SynthesizePinchGestureRequest{opts: make(map[string]interface{}), client: d.Client}
}

// X coordinate of the start of the gesture in CSS pixels.
func (r *SynthesizePinchGestureRequest) X(v int) *SynthesizePinchGestureRequest {
	r.opts["x"] = v
	return r
}

// Y coordinate of the start of the gesture in CSS pixels.
func (r *SynthesizePinchGestureRequest) Y(v int) *SynthesizePinchGestureRequest {
	r.opts["y"] = v
	return r
}

// Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
func (r *SynthesizePinchGestureRequest) ScaleFactor(v float64) *SynthesizePinchGestureRequest {
	r.opts["scaleFactor"] = v
	return r
}

// Relative pointer speed in pixels per second (default: 800). (optional)
func (r *SynthesizePinchGestureRequest) RelativeSpeed(v int) *SynthesizePinchGestureRequest {
	r.opts["relativeSpeed"] = v
	return r
}

// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type). (optional)
func (r *SynthesizePinchGestureRequest) GestureSourceType(v GestureSourceType) *SynthesizePinchGestureRequest {
	r.opts["gestureSourceType"] = v
	return r
}

func (r *SynthesizePinchGestureRequest) Do() error {
	return r.client.Call("Input.synthesizePinchGesture", r.opts, nil)
}

type SynthesizeScrollGestureRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Synthesizes a scroll gesture over a time period by issuing appropriate touch events. (experimental)
func (d *Client) SynthesizeScrollGesture() *SynthesizeScrollGestureRequest {
	return &SynthesizeScrollGestureRequest{opts: make(map[string]interface{}), client: d.Client}
}

// X coordinate of the start of the gesture in CSS pixels.
func (r *SynthesizeScrollGestureRequest) X(v int) *SynthesizeScrollGestureRequest {
	r.opts["x"] = v
	return r
}

// Y coordinate of the start of the gesture in CSS pixels.
func (r *SynthesizeScrollGestureRequest) Y(v int) *SynthesizeScrollGestureRequest {
	r.opts["y"] = v
	return r
}

// The distance to scroll along the X axis (positive to scroll left). (optional)
func (r *SynthesizeScrollGestureRequest) XDistance(v int) *SynthesizeScrollGestureRequest {
	r.opts["xDistance"] = v
	return r
}

// The distance to scroll along the Y axis (positive to scroll up). (optional)
func (r *SynthesizeScrollGestureRequest) YDistance(v int) *SynthesizeScrollGestureRequest {
	r.opts["yDistance"] = v
	return r
}

// The number of additional pixels to scroll back along the X axis, in addition to the given distance. (optional)
func (r *SynthesizeScrollGestureRequest) XOverscroll(v int) *SynthesizeScrollGestureRequest {
	r.opts["xOverscroll"] = v
	return r
}

// The number of additional pixels to scroll back along the Y axis, in addition to the given distance. (optional)
func (r *SynthesizeScrollGestureRequest) YOverscroll(v int) *SynthesizeScrollGestureRequest {
	r.opts["yOverscroll"] = v
	return r
}

// Prevent fling (default: true). (optional)
func (r *SynthesizeScrollGestureRequest) PreventFling(v bool) *SynthesizeScrollGestureRequest {
	r.opts["preventFling"] = v
	return r
}

// Swipe speed in pixels per second (default: 800). (optional)
func (r *SynthesizeScrollGestureRequest) Speed(v int) *SynthesizeScrollGestureRequest {
	r.opts["speed"] = v
	return r
}

// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type). (optional)
func (r *SynthesizeScrollGestureRequest) GestureSourceType(v GestureSourceType) *SynthesizeScrollGestureRequest {
	r.opts["gestureSourceType"] = v
	return r
}

// The number of times to repeat the gesture (default: 0). (optional)
func (r *SynthesizeScrollGestureRequest) RepeatCount(v int) *SynthesizeScrollGestureRequest {
	r.opts["repeatCount"] = v
	return r
}

// The number of milliseconds delay between each repeat. (default: 250). (optional)
func (r *SynthesizeScrollGestureRequest) RepeatDelayMs(v int) *SynthesizeScrollGestureRequest {
	r.opts["repeatDelayMs"] = v
	return r
}

// The name of the interaction markers to generate, if not empty (default: ""). (optional)
func (r *SynthesizeScrollGestureRequest) InteractionMarkerName(v string) *SynthesizeScrollGestureRequest {
	r.opts["interactionMarkerName"] = v
	return r
}

func (r *SynthesizeScrollGestureRequest) Do() error {
	return r.client.Call("Input.synthesizeScrollGesture", r.opts, nil)
}

type SynthesizeTapGestureRequest struct {
	client *rpc.Client
	opts   map[string]interface{}
}

// Synthesizes a tap gesture over a time period by issuing appropriate touch events. (experimental)
func (d *Client) SynthesizeTapGesture() *SynthesizeTapGestureRequest {
	return &SynthesizeTapGestureRequest{opts: make(map[string]interface{}), client: d.Client}
}

// X coordinate of the start of the gesture in CSS pixels.
func (r *SynthesizeTapGestureRequest) X(v int) *SynthesizeTapGestureRequest {
	r.opts["x"] = v
	return r
}

// Y coordinate of the start of the gesture in CSS pixels.
func (r *SynthesizeTapGestureRequest) Y(v int) *SynthesizeTapGestureRequest {
	r.opts["y"] = v
	return r
}

// Duration between touchdown and touchup events in ms (default: 50). (optional)
func (r *SynthesizeTapGestureRequest) Duration(v int) *SynthesizeTapGestureRequest {
	r.opts["duration"] = v
	return r
}

// Number of times to perform the tap (e.g. 2 for double tap, default: 1). (optional)
func (r *SynthesizeTapGestureRequest) TapCount(v int) *SynthesizeTapGestureRequest {
	r.opts["tapCount"] = v
	return r
}

// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type). (optional)
func (r *SynthesizeTapGestureRequest) GestureSourceType(v GestureSourceType) *SynthesizeTapGestureRequest {
	r.opts["gestureSourceType"] = v
	return r
}

func (r *SynthesizeTapGestureRequest) Do() error {
	return r.client.Call("Input.synthesizeTapGesture", r.opts, nil)
}

func init() {
}
