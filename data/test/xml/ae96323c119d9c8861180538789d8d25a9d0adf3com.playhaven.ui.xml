<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.playhaven.ui"><apiName>com.playhaven.ui</apiName><apiDetail/><apiClassifier id="com.playhaven.ui:DefaultNotificationBadgeRenderer"><apiName>DefaultNotificationBadgeRenderer</apiName><shortdesc> DefaultNotificationBadgeRenderer </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.playhaven.ui:NotificationBadgeRenderer</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> DefaultNotificationBadgeRenderer </apiDesc></apiClassifierDetail><apiConstructor id="com.playhaven.ui:DefaultNotificationBadgeRenderer:DefaultNotificationBadgeRenderer"><apiName>DefaultNotificationBadgeRenderer</apiName><shortdesc> Create New DefaultNotificationBadgeRenderer </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Create New DefaultNotificationBadgeRenderer </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.playhaven.ui:DefaultNotificationBadgeRenderer:renderToSurface"><apiName>renderToSurface</apiName><shortdesc>
	 Render a badge into the provided Sprite with the given value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>surface</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>the Sprite into which the badge should be rendered.
	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="int"/><apiDesc>the numeric value to display in the badge
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Render a badge into the provided Sprite with the given value.
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.playhaven.ui:DefaultNotificationBadgeRenderer:BadgeImageClass"><apiName>BadgeImageClass</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiType value="Class"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.playhaven.ui:NotificationBadge"><apiName>NotificationBadge</apiName><shortdesc> NotificationBadge </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc> NotificationBadge </apiDesc></apiClassifierDetail><apiConstructor id="com.playhaven.ui:NotificationBadge:NotificationBadge"><apiName>NotificationBadge</apiName><shortdesc>
	 Creates a new notification badge.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>playhaven</apiItemName><apiOperationClassifier>com.playhaven:PlayHaven</apiOperationClassifier><apiDesc>instance of the PlayHaven extension
	 </apiDesc></apiParam><apiParam><apiItemName>placementId</apiItemName><apiType value="String"/><apiDesc>placementId, from the PlayHaven dashboard, for which the notification badge applies
	 </apiDesc></apiParam><apiParam><apiItemName>renderer</apiItemName><apiOperationClassifier>com.playhaven.ui:NotificationBadgeRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>NotificationBadgeRenderer to render the badge.  If not set, a default renderer is applied
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a new notification badge.  You should use PlayHaven.playhaven.createNotificationBadge() instead of instantiating it directly.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.playhaven.ui:NotificationBadge:refresh"><apiName>refresh</apiName><shortdesc>
	 Contacts the PlayHaven server to get the latest badge number and update the view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Contacts the PlayHaven server to get the latest badge number and update the view.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.playhaven.ui:NotificationBadge:render"><apiName>render</apiName><shortdesc>
	 Forces the badge to rerender based on the latest value
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Forces the badge to rerender based on the latest value
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.playhaven.ui:NotificationBadge:testMode:get"><apiName>testMode</apiName><shortdesc>
	 When testMode is true, the badge will render even if its value is 0.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 When testMode is true, the badge will render even if its value is 0.  This is useful during testing, to ensure proper alignment of the view, etc.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven.ui:NotificationBadge:value:get"><apiName>value</apiName><shortdesc>
	 The value to display on the badge
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
	 The value to display on the badge
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.playhaven.ui:NotificationBadgeRenderer"><apiName>NotificationBadgeRenderer</apiName><shortdesc> NotificaitonBadgeRenderer Interface </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> NotificaitonBadgeRenderer Interface </apiDesc></apiClassifierDetail><apiOperation id="com.playhaven.ui:NotificationBadgeRenderer:com.playhaven.ui:NotificationBadgeRenderer:renderToSurface"><apiName>renderToSurface</apiName><shortdesc>
 Render a badge into the provided Sprite with the given value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>surface</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>the Sprite into which the badge should be rendered.
 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="int"/><apiDesc>the numeric value to display in the badge
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 Render a badge into the provided Sprite with the given value.
 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>